(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"html, body, #content {\n    height: 100vh;\n    width: 100%;\n    margin: 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 18px;\n\n    background-color: #D4D4D4;\n}\n\n.inputContainer {\n    width: 100%;\n    padding: 48px 0px;\n    background-color: whitesmoke;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 24px;\n}\n\n.formContainer {\n    display: flex;\n    gap: 24px;\n}\n\n.submitBtn {\n    color: whitesmoke;\n    font-weight: bold;\n    font-size: 16px;\n\n    background-color: royalblue;\n    border: none;\n    outline: none;\n    padding: 12px;\n    border-radius: 16px;\n\n}\n\n.gridContainer {\n    width: 80%;\n    margin: 24px;\n\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 2fr 2fr 2fr;\n    gap: 12px;\n}\n\n.dataContainer {\n    background-color: whitesmoke;\n    border-radius: 16px;\n    box-shadow: 4px 6px darkgray;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    gap: 24px;\n\n}\n\n.dataContainer.main {\n    font-size: 24px;\n    gap: 48px;\n}\n\n.dataTitle {\n    font-weight: bold;\n    width: 80%;\n}\n\n.station {\n    grid-column: 1 / -1;\n}\n\n.main {\n    grid-row: 2 / -1;\n}\n\n.errorMsg {\n    color: red;\n    font-weight: bold;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,WAAW;IACX,SAAS;IACT,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,yCAAyC;IACzC,eAAe;;IAEf,yBAAyB;AAC7B;;AAEA;IACI,WAAW;IACX,iBAAiB;IACjB,4BAA4B;;IAE5B,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,eAAe;;IAEf,2BAA2B;IAC3B,YAAY;IACZ,aAAa;IACb,aAAa;IACb,mBAAmB;;AAEvB;;AAEA;IACI,UAAU;IACV,YAAY;;IAEZ,aAAa;IACb,8BAA8B;IAC9B,mCAAmC;IACnC,SAAS;AACb;;AAEA;IACI,4BAA4B;IAC5B,mBAAmB;IACnB,4BAA4B;;IAE5B,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,mBAAmB;IACnB,SAAS;;AAEb;;AAEA;IACI,eAAe;IACf,SAAS;AACb;;AAEA;IACI,iBAAiB;IACjB,UAAU;AACd;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,UAAU;IACV,iBAAiB;AACrB",sourcesContent:["html, body, #content {\n    height: 100vh;\n    width: 100%;\n    margin: 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 18px;\n\n    background-color: #D4D4D4;\n}\n\n.inputContainer {\n    width: 100%;\n    padding: 48px 0px;\n    background-color: whitesmoke;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 24px;\n}\n\n.formContainer {\n    display: flex;\n    gap: 24px;\n}\n\n.submitBtn {\n    color: whitesmoke;\n    font-weight: bold;\n    font-size: 16px;\n\n    background-color: royalblue;\n    border: none;\n    outline: none;\n    padding: 12px;\n    border-radius: 16px;\n\n}\n\n.gridContainer {\n    width: 80%;\n    margin: 24px;\n\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 2fr 2fr 2fr;\n    gap: 12px;\n}\n\n.dataContainer {\n    background-color: whitesmoke;\n    border-radius: 16px;\n    box-shadow: 4px 6px darkgray;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    gap: 24px;\n\n}\n\n.dataContainer.main {\n    font-size: 24px;\n    gap: 48px;\n}\n\n.dataTitle {\n    font-weight: bold;\n    width: 80%;\n}\n\n.station {\n    grid-column: 1 / -1;\n}\n\n.main {\n    grid-row: 2 / -1;\n}\n\n.errorMsg {\n    color: red;\n    font-weight: bold;\n}\n"],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],c=0;c<n.length;c++){var s=n[c],d=r.base?s[0]+r.base:s[0],l=a[d]||0,A="".concat(d," ").concat(l);a[d]=l+1;var u=t(A),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var m=o(p,r);r.byIndex=c,e.splice(c,0,{identifier:A,updater:m,references:1})}i.push(A)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=t(a[i]);e[c].references--}for(var s=r(n,o),d=0;d<a.length;d++){var l=t(a[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),i=t.n(a),c=t(565),s=t.n(c),d=t(216),l=t.n(d),A=t(589),u=t.n(A),p=t(426),m={};m.styleTagTransform=u(),m.setAttributes=s(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=l(),e()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;async function f(n,e,t){const r=await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${n}&lon=${e}&appid=41abf8f82ecf917e239e4a79363e88bc&units=${t}`,{mode:"cors"});!function(n,e){const t={station:{location:n.name},main:n.main,sunriseSunset:{sunrise:new Date(1e3*n.sys.sunrise).toLocaleTimeString(),sunset:new Date(1e3*n.sys.sunset).toLocaleTimeString()},general:{weather:n.weather[0].description,icon:n.weather[0].icon},wind:n.wind};let r=null;"imperial"===e?r={temp:"°F",speed:"MPH"}:"metric"===e&&(r={temp:"°C",speed:"m/s"});for(const n in t)for(const e in t[n])"temp"===e||"feels_like"===e||"temp_min"===e||"temp_max"===e?t[n][e]+=r.temp:"pressure"===e?t[n][e]+="hPa":"humidity"===e?t[n][e]+="%":"speed"===e&&(t[n][e]+=r.speed);(n=>{document.querySelector(".gridContainer")&&document.querySelector(".gridContainer").remove();const e=document.createElement("div");e.classList.add("gridContainer");for(const t in n){const r=document.createElement("div");r.classList.add(t),r.classList.add("dataContainer");const o=document.createElement("div");o.classList.add("dataTitle"),o.textContent=t[0].toUpperCase()+t.slice(1),r.appendChild(o);for(const e in n[t]){let o=null;"icon"===e?(o=document.createElement("img"),o.src=`https://openweathermap.org/img/wn/${n[t][e]}@2x.png`):(o=document.createElement("div"),o.textContent=`${e[0].toUpperCase()+e.slice(1).replace(/_/," ")}: ${n[t][e]}`),o.classList.add(e),o.classList.add("data"),r.appendChild(o)}e.appendChild(r)}document.querySelector("#content").appendChild(e)})(t)}(await r.json(),t)}(()=>{const n=document.createElement("div");n.classList.add("inputContainer");const e=document.createElement("form");e.classList.add("formContainer");const t=document.createElement("input");t.classList.add("searchbar"),t.setAttribute("name","location"),t.setAttribute("placeholder","5 digit US zipcode"),e.appendChild(t);const r=document.createElement("label");r.setAttribute("for","fahrUnit"),r.textContent="F",e.appendChild(r);const o=document.createElement("input");o.setAttribute("type","radio"),o.setAttribute("id","fahrUnit"),o.setAttribute("name","units"),o.setAttribute("value","imperial"),o.checked=!0,e.appendChild(o);const a=document.createElement("label");a.setAttribute("for","celUnit"),a.textContent="C",e.appendChild(a);const i=document.createElement("input");i.setAttribute("type","radio"),i.setAttribute("id","celUnit"),i.setAttribute("name","units"),i.setAttribute("value","metric"),e.appendChild(i),n.appendChild(e);const c=document.createElement("button");c.classList.add("submitBtn"),c.textContent="Get Weather",n.appendChild(c),document.querySelector("#content").appendChild(n)})(),document.querySelector(".submitBtn").addEventListener("click",(()=>{if(document.querySelector(".errorMsg")&&document.querySelector(".errorMsg").remove(),document.querySelector(".formContainer").location.value>0&&5===document.querySelector(".formContainer").location.value.length)!async function(n,e="us",t="imperial"){const r=await fetch(`https://api.openweathermap.org/geo/1.0/zip?zip=${n},${e}&appid=41abf8f82ecf917e239e4a79363e88bc`,{mode:"cors"}),o=await r.json();f(o.lat,o.lon,t)}(document.querySelector(".formContainer").location.value,"us",document.querySelector(".formContainer").units.value);else{const n=document.createElement("div");n.classList.add("errorMsg"),n.textContent="Must use a valid 5 digit US zipcode",document.querySelector(".inputContainer").appendChild(n)}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,